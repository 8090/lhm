#!/usr/bin/env ruby

require "trollop"
require "open3"
require "active_record"

class Load
  attr_accessor :opts, :counts

  def initialize
    self.opts = Trollop::options do
      opt :database, "The database", :default => "large_hadron_migrator"
      opt :username, "The username", :default => ""
      opt :host,     "The hostname", :default => "localhost", :short => "n"
      opt :password, "The password", :type => :string
      opt :adapter,  "The adapter",  :default => "mysql"
      opt :slowdown, "Slowdown of queries in seconds",  :default => 0.0
      opt :wait,     "Time between queries in seconds", :default => 0.0
      opt :debug,    "Log sql statements", :default => false
    end
  end

  def config
    self.opts.select do |key, value|
      [:database, :username, :host, :password, :adapter].include?(key)
    end
  end

  def run
    ActiveRecord::Base.establish_connection(config)
    if opts[:debug]
      $stdout.sync = true
      ActiveRecord::Base.logger = Logger.new($stdout)
    end

    load
  end

  def load
    types = [:insert, :update, :delete]
    self.counts = types.inject({}) { |memo, type| memo.merge(type => 0) }
    terminated = false
    %w[INT TERM].each { |signal| Signal.trap(signal) { terminated = true } }

    loop do
      transaction do
        type = types.sample
        counts[type] += type == :insert ? insert : perform(type)
      end

      break if terminated

      sleep(opts[:wait]) if opts[:wait] > 0
    end

    puts self.counts.inspect
  end

  def insert
    random = File.open("/dev/random")
    data = ["'", [random.read(1024)].pack("m*").gsub("\n", ""), "'"].join

    if opts[:slowdown] > 0
      slowdown = "(select sleep(#{opts[:slowdown]})"
      data = "concat(replace(cast(#{slowdown}) as char(1)), '0', ''), #{data})"
    end

    connection.insert(%{
      insert into test (type, data, created_at) values
      ('load', #{data}, UTC_TIMESTAMP())
    })
    1
  ensure
    random.close
    0
  end

  def perform(type)
    return 0 unless id = next_id(type)

    conditions = "id = #{id}"
    if opts[:slowdown] > 0
      conditions << " and 0 = (select sleep(#{opts[:slowdown]}))"
    end

    case type
    when :update
      connection.update(%{
        update test set updated = 1 where #{conditions}
      })
    when :delete
      connection.delete("delete from test where #{conditions}")
    end
  end

private

  def transaction
    connection.execute("begin")
    yield
    connection.execute("commit")
  end

  def next_id(type)
    connection.select_value(%{
      select id from test
      where type = '#{type}' and updated = 0
      order by id asc limit 1
    })
  end

  def connection
    ActiveRecord::Base.connection
  end
end

script = Load.new
script.run

exit 0 # script aborts on errors
